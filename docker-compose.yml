version: '3.8'
services:
  zookeeper:
    container_name: msh-zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - myNetwork

  kafka:
    container_name: msh-kafka
    image: 'bitnami/kafka:latest'
    user: root
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./Kafka:/bitnami/kafka
    networks:
      - myNetwork
    depends_on:
      - zookeeper
  mongodb:
    container_name: msh-mongodb
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongodb-data:/data/db
      - mongodb_config:/data/configdb
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27017']
    environment:
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD

  # producerservice:
  #   container_name: msh-producerservice
  #   build:
  #     context: ./backend
  #     dockerfile: ./Dockerfile
  #     args:
  #       project: producerservice
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     PUBLISHER_TYPE: 'KAFKA'
  #     KAFKA_BROKERS: kafka:9092
  #     KAFKA_TOPIC: 'mastodon-posts'
  #     SERVICE_PORT: '50051'

  # mastodonstream:
  #   container_name: msh-mastodonstream
  #   build:
  #     context: ./backend
  #     dockerfile: ./Dockerfile
  #     args:
  #       project: mastodonstream
  #   depends_on:
  #     - producerservice
  #     - zookeeper
  #   environment:
  #     - MASTODON_SERVER
  #     - MASTODON_CLIENT_ID
  #     - MASTODON_CLIENT_SECRET
  #     - MASTODON_ACCESS_TOKEN
  #     - GRPC_SERVICE_ADDR

networks:
  myNetwork:

volumes:
  mongodb-data:
  mongodb_config:
