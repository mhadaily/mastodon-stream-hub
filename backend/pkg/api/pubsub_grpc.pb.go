// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: pubsub.proto

package hubapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenericPubSubService_Publish_FullMethodName = "/hubapiv1.GenericPubSubService/Publish"
)

// GenericPubSubServiceClient is the client API for GenericPubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenericPubSubServiceClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (GenericPubSubService_PublishClient, error)
}

type genericPubSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericPubSubServiceClient(cc grpc.ClientConnInterface) GenericPubSubServiceClient {
	return &genericPubSubServiceClient{cc}
}

func (c *genericPubSubServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (GenericPubSubService_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &GenericPubSubService_ServiceDesc.Streams[0], GenericPubSubService_Publish_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &genericPubSubServicePublishClient{stream}
	return x, nil
}

type GenericPubSubService_PublishClient interface {
	Send(*PubSubGenericMessage) error
	CloseAndRecv() (*PubSubPublishResponse, error)
	grpc.ClientStream
}

type genericPubSubServicePublishClient struct {
	grpc.ClientStream
}

func (x *genericPubSubServicePublishClient) Send(m *PubSubGenericMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *genericPubSubServicePublishClient) CloseAndRecv() (*PubSubPublishResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PubSubPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GenericPubSubServiceServer is the server API for GenericPubSubService service.
// All implementations must embed UnimplementedGenericPubSubServiceServer
// for forward compatibility
type GenericPubSubServiceServer interface {
	Publish(GenericPubSubService_PublishServer) error
	mustEmbedUnimplementedGenericPubSubServiceServer()
}

// UnimplementedGenericPubSubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenericPubSubServiceServer struct {
}

func (UnimplementedGenericPubSubServiceServer) Publish(GenericPubSubService_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedGenericPubSubServiceServer) mustEmbedUnimplementedGenericPubSubServiceServer() {}

// UnsafeGenericPubSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenericPubSubServiceServer will
// result in compilation errors.
type UnsafeGenericPubSubServiceServer interface {
	mustEmbedUnimplementedGenericPubSubServiceServer()
}

func RegisterGenericPubSubServiceServer(s grpc.ServiceRegistrar, srv GenericPubSubServiceServer) {
	s.RegisterService(&GenericPubSubService_ServiceDesc, srv)
}

func _GenericPubSubService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GenericPubSubServiceServer).Publish(&genericPubSubServicePublishServer{stream})
}

type GenericPubSubService_PublishServer interface {
	SendAndClose(*PubSubPublishResponse) error
	Recv() (*PubSubGenericMessage, error)
	grpc.ServerStream
}

type genericPubSubServicePublishServer struct {
	grpc.ServerStream
}

func (x *genericPubSubServicePublishServer) SendAndClose(m *PubSubPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *genericPubSubServicePublishServer) Recv() (*PubSubGenericMessage, error) {
	m := new(PubSubGenericMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GenericPubSubService_ServiceDesc is the grpc.ServiceDesc for GenericPubSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenericPubSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hubapiv1.GenericPubSubService",
	HandlerType: (*GenericPubSubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _GenericPubSubService_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}
